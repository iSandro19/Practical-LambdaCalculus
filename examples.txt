"Tipos y expresiones básicas";;
true;;
let x = true in x;;
if false then true else false;;
0;;
succ (succ (succ 0));;
3;;
succ (pred 0);;
iszero (pred (succ (succ 0)));;
if iszero 3 then 0 else 1;;
let x = 5 in let id_nat = L x:Nat. x in id_nat x;;

"Multilínea";;
if iszero 1
then true
else false;;

"Combinador de punto fijo interno";;
letrec sum : Nat -> Nat -> Nat =
  lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
sum 10 5;;
letrec prod : Nat -> Nat -> Nat =
  lambda n : Nat. lambda m : Nat.
    letrec sum : Nat -> Nat -> Nat =
      lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
    in
      if iszero n then 0 else sum (m) (prod (pred n) m)
  in
    prod 10 5;;
letrec fib : Nat -> Nat =
  letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
  in
    lambda n : Nat. if iszero n then 0 else if (iszero (pred n)) then 1 else sum (fib (pred n)) (fib (pred (pred n)))
in
    fib 10;;
letrec fact : Nat -> Nat =
  letrec sum : Nat -> Nat -> Nat =
    lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m)
  in
    letrec prod : Nat -> Nat -> Nat =
      lambda n : Nat. lambda m : Nat. if iszero n then 0 else sum (m) (prod (pred n) m)
    in
      lambda n : Nat. if iszero n then 1 else prod (n) (fact (pred n))
in
    fact 5;;

"Definiciones";;
verdad = true;;
verdad;;
falso = false;;
if iszero 0 then falso else verdad;;

"Strings";;
concat "Hello " "World!";;

"Pares";;
par1 = {"asd", {true, 1}};;
fst par1;;
snd par1;;

"Tuplas";;
tupla1 = {true, 1, "asd"};;
fst tupla1;;
snd tupla1;;
tupla1.3;;

"Registros";;
registro1 = {a=true, b=1, c={"asd", "fgh", {z=true, x=false}}};;
registro1.a;;
registro1.b;;
registro1.c;;

"Listas";;
lista1 = [1, 2, 3, 4];;
hd lista1;;
tl lista1;;
isempty lista1;;

"Unit";;
unit;;
unit; unit; unit; true;;
